#!/usr/bin/env node

var os = require('os');
var fs = require('fs');
var assert = require('assert');
var path = require('path');
var platform = os.platform();
var ProgressBar = require('progress');
var https = require('https');
var arch = os.arch();
var exec = require('child_process').exec;

// downloadUrl vars
var releasesUrl = 'https://github.com/getsentry/sentry-cli/releases/download/';
var version = require('../package.json').version;
var binaryPrefix = '/sentry-cli-';
var platformOSX = 'Darwin';
var platformWindows = 'Windows';
var platformLinux = 'Linux';
var archSuffix32bit = '-i686';
var archSuffix64bit = '-x86_64';
var windowsFileExt = '.exe';

// output vars
var outputName = 'sentry-cli';
var outputPath = path.join(__dirname, outputName) + (platform === 'win32' ? windowsFileExt : '');

var downloadUrl = null;

// macOS
if (platform === 'darwin') { //OSX
  downloadUrl = releasesUrl + version + binaryPrefix + platformOSX + archSuffix64bit;
// Windows
} else if (platform === 'win32') {
  downloadUrl = releasesUrl + version + binaryPrefix + platformWindows + archSuffix32bit + windowsFileExt;
// Linux
} else {
  if (arch.indexOf('64') > -1) {
    downloadUrl = releasesUrl + version + binaryPrefix + platformLinux + archSuffix64bit;
  } else {
    downloadUrl = releasesUrl + version + binaryPrefix + platformLinux + archSuffix32bit;
  }
}

if (downloadUrl === null) {
  console.log('error: your platform and architecture (' + platform + '-' + arch + ') is unsupported.');
  process.exit(1);
}

// Download the binary from the response
function downloadBinary(res) {
  require('fs').writeFileSync('/tmp/debug.log', JSON.stringify(process.env));
  var fn = downloadUrl.match(/.*\/(.*?)$/)[1];
  var total = parseInt(res.headers['content-length'], 10);
  var downloaded = 0;
  var progress = null;
  var isYarn = false;
  if (process.stdout.isTTY) {
    progress = new ProgressBar('fetching ' + fn +' :bar :percent :etas', {
      complete: "█",
      incomplete: "░",
      width: 20,
      total: total
    });
  } else if ((process.env.npm_config_user_agent || '').match(/yarn/)) {
    isYarn = true;
  }
  var download = fs.createWriteStream(outputPath, {
    mode: Number.parseInt('0755', 8)
  });
  res.pipe(download);
  res.on('data', function(chunk) {
    downloaded += chunk.length;
    if (process.stdout.isTTY) {
      progress.tick(chunk.length);
    } else if (isYarn) {
      process.stdout.write('fetching ' + fn + ' ' + Math.round(
        downloaded / total * 100) + '%\n');
    }
  });
  download.on('error', function(err) {
    console.log(err);
    process.exit(1);
  });
  download.on('close', function() {
    exec(outputPath + ' --version', function(error, stdout, stderr) {
      if (error) {
        console.log('Something went wrong!');
        console.error(error);
        process.exit(1);
      } else {
        if (stdout.trim() !== outputName + ' ' + version) {
          console.error('Warning! Unexpected ' + outputName + ' version: ' + stdout.trim().split(' ')[1] + ', expected ' + version + '!');
        }
        process.exit(0);
      }
    });
  });
}

// Count redirects, just in case we get a loop.
// Pretty sure this can't happen with the github releases URL
var redirectCt = 0;
function handleResponse(res) {
  if (res.statusCode === 302) {
    redirectCt++;
    if (redirectCt > 10) {
      console.log('error: Too many redirects!');
      process.exit(1);
    }
    https.get(res.headers['Location'] || res.headers['location'], handleResponse)
      .on('error', function(err) {
        console.log(err);
        process.exit(1);
      });
  } else if (res.statusCode >= 200 && res.statusCode < 300) {
    downloadBinary(res);
  } else {
    console.log('Received ' + res.statusCode + ': ' + res.statusMessage);
    process.exit(1);
  }
}

// Start download
https.get(downloadUrl, handleResponse)
  .on('error', function(err) {
    console.log(err);
    process.exit(1);
  });
